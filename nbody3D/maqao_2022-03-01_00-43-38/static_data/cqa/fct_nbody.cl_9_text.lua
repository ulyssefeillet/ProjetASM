_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          workaround = "Use vector aligned instructions:\n 1) align your arrays on 64 bytes boundaries\n 2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n",
          details = " - VMOVUPS: 2 occurrences\n",
          title = "Vector unaligned load/store instructions",
          txt = "Detected 2 optimal vector unaligned load/store instructions.\n",
        },
        {
          workaround = "Try to simplify your code and/or replace indirect accesses with unit-stride ones.",
          details = " - VSCATTERQPS: 3 occurrences\n",
          title = "Gather/scatter instructions",
          txt = "Detected gather/scatter instructions (typically caused by indirect accesses).",
        },
        {
          title = "Type of elements and instruction set",
          txt = "3 AVX instructions are processing arithmetic or math operations on single precision FP elements in vector mode (eight at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 48 FP arithmetical operations:\n - 24: addition or subtraction (all inside FMA instructions)\n - 24: multiply (all inside FMA instructions)\nThe binary function is loading 1084 bytes (271 single precision FP elements).\nThe binary function is storing 464 bytes (116 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.03 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 161\nloop length        : 951\nused x86 registers : 9\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 11\nused zmm registers : 24\nnb stack references: 6\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 60.00 cycles\ninstruction queue    : 80.50 cycles\ndecoding             : 80.50 cycles\nmicro-operation queue: 81.00 cycles\nfront end            : 81.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 36.50 | 36.50 | 27.00 | 27.00 | 32.50 | 32.50 | 9.00\ncycles | 36.50 | 36.50 | 27.00 | 27.00 | 32.50 | 32.50 | 9.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 81.00\nDispatch  : 36.50\nOverall L1: 81.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 41%\nload   : 54%\nstore  : 100%\nmul    : 66%\nadd-sub: 66%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 85%\nload    : 69%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 82%\nINT+FP\nall     : 64%\nload    : 62%\nstore   : 100%\nmul     : 66%\nadd-sub : 66%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 52%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 42%\nload   : 46%\nstore  : 100%\nmul    : 70%\nadd-sub: 70%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 27%\nFP\nall     : 48%\nload    : 36%\nstore   : 45%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 50%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 48%\nINT+FP\nall     : 45%\nload    : 41%\nstore   : 63%\nmul     : 70%\nadd-sub : 70%\nfma     : 50%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 37%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 81.00 cycles. At this rate:\n - 10% of peak load performance is reached (13.38 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 8% of peak store performance is reached (5.73 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 4012b0\n\nInstruction                           | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6 | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------\nSUB $0xf8,%RSP                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nTEST %RSI,%RSI                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401898 <move_particles+0x5e8>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nMOV %RSI,%R9                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nAND $-0x20,%R9                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nLEA 0x8(%RDI),%R8                     | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nXOR %R10D,%R10D\nVMOVSS 0x1d32(%RIP),%XMM13            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVSS 0x1d2e(%RIP),%XMM14            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPBROADCASTQ 0x1dd8(%RIP),%ZMM9       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ %RDI,%ZMM2               | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 3       | 1\nVPBROADCASTQ 0x1dd0(%RIP),%ZMM15      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dce(%RIP),%ZMM6       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dcc(%RIP),%ZMM10      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dca(%RIP),%ZMM7       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dc8(%RIP),%ZMM11      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVBROADCASTSS 0x1cde(%RIP),%ZMM12      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVAPS %XMM0,-0x70(%RSP)             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVMOVDQU64 %ZMM2,(%RSP)                | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVMOVDQU64 %ZMM6,0x80(%RSP)            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVMOVDQU64 %ZMM7,0x40(%RSP)            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nJMP 40139b <move_particles+0xeb>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 2\nNOPL (%RAX)                           | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nTEST %RSI,%RSI                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401898 <move_particles+0x5e8>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nCMP $0x7,%RSI                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 4018a0 <move_particles+0x5f0>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nXOR %R9D,%R9D\nSUB %R9,%RSI                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nLEA (%R9,%R9,2),%RAX                  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nLEA (%RDI,%RAX,8),%RAX                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nXCHG %AX,%AX                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nADD $0xf8,%RSP                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nRET\nLEA -0x1(%RSI),%RAX                   | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMOV $0x18,%ECX                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMUL %RCX                              | 3     | 0    | 0    | 0    | 0    | 3    | 0    | 0  | 8       | 7\nSETO %CL                              | 1     | 0    | 0    | 0    | 0    | 1    | 1    | 0  | 2       | 1\nMOV %RDI,%RDX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nNOT %RDX                              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nXOR %R9D,%R9D\nCMP %RDX,%RAX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 401853 <move_particles+0x5a3>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nTEST %CL,%CL                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nLEA 0x4(%RDI),%RDX                    | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nNOT %RDX                              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nCMP %RDX,%RAX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 401853 <move_particles+0x5a3>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nTEST %CL,%CL                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nNOT %R8                               | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nCMP %R8,%RAX                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 401853 <move_particles+0x5a3>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nTEST %CL,%CL                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nMOV %RSI,%R9                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nAND $-0x8,%R9                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVBROADCASTSS %XMM0,%YMM5              | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 3-6     | 1\nLEA -0x8(%R9),%RAX                    | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMOV %RAX,%RCX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nSHR $0x3,%RCX                         | 1     | 0    | 0    | 0    | 0    | 1    | 0    | 0  | 1       | 1\nADD $0x1,%RCX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMOV %ECX,%R8D                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nAND $0x1,%R8D                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nTEST %RAX,%RAX                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401de3 <move_particles+0xb33>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nSUB %R8,%RCX                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVMOVDQA64 %ZMM6,%ZMM26                | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVDQA64 0x1759(%RIP),%ZMM6          | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nXOR %EAX,%EAX\nVBROADCASTSD 0x17c6(%RIP),%YMM0       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS %YMM0,-0x40(%RSP)             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVBROADCASTI64X4 0x181e(%RIP),%ZMM21   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTSD 0x17b5(%RIP),%YMM0       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS %YMM0,-0x60(%RSP)             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVBROADCASTI64X4 0x1825(%RIP),%ZMM22   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x183b(%RIP),%ZMM23   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x1851(%RIP),%ZMM24   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x1867(%RIP),%ZMM28   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTF128 0x189e(%RIP),%YMM14    | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTF128 0x18a5(%RIP),%YMM15    | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x186b(%RIP),%ZMM16   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPBROADCASTQ 0x1769(%RIP),%ZMM17      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1767(%RIP),%ZMM18      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1765(%RIP),%ZMM19      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1763(%RIP),%ZMM20      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nMOV %RDI,%RDX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nVMOVDQU64 (%RSP),%ZMM25               | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVDQA64 %ZMM7,%ZMM27                | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVUPS -0x60(%RSP),%YMM3             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nNOPW %CS:(%RAX,%RAX,1)                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nNOPL (%RAX)                           | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nTEST %R8,%R8                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401dcf <move_particles+0xb1f>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nLEA (%RAX,%RAX,2),%RAX                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVMOVUPS (%RDI,%RAX,8),%ZMM0           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS 0x40(%RDI,%RAX,8),%ZMM2       | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS 0x80(%RDI,%RAX,8),%YMM7       | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS 0xa0(%RDI,%RAX,8),%YMM8       | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBLENDPS $0x30,%YMM7,%YMM8,%YMM3      | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTSD 0x146f(%RIP),%YMM1       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM3,%YMM1,%YMM1             | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14ca(%RIP),%YMM4            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM4           | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x40,%YMM1,%YMM4,%YMM1     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTSD 0x1455(%RIP),%YMM4       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM3,%YMM4,%YMM3             | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14c8(%RIP),%YMM4            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM4           | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x40,%YMM3,%YMM4,%YMM3     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVAPS 0x14d4(%RIP),%YMM4            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM4           | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x20,%YMM7,%YMM8,%YMM10      | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x20,%YMM10,%YMM7,%YMM10     | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVPERMPD $-0x3c,%YMM10,%YMM10          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 2       | 1\nVBLENDPS $-0x20,%YMM10,%YMM4,%YMM4    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVAPS 0x14cf(%RIP),%YMM10           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM10          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x31,%YMM7,%YMM8,%YMM11      | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x24,%YMM11,%YMM7,%YMM11     | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVPERMPD $-0x3c,%YMM11,%YMM11          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 2       | 1\nVBLENDPS $-0x20,%YMM11,%YMM10,%YMM10  | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBLENDPS $0xc,%YMM7,%YMM8,%YMM7       | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTF128 0x1503(%RIP),%YMM8     | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM7,%YMM8,%YMM8             | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14b6(%RIP),%YMM11           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM0,%ZMM2,%ZMM11          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x20,%YMM8,%YMM11,%YMM8    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTF128 0x14f1(%RIP),%YMM11    | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM7,%YMM11,%YMM7            | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14b4(%RIP),%YMM11           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM0,%ZMM2,%ZMM11          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x20,%YMM7,%YMM11,%YMM0    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVPMULUDQ %ZMM9,%ZMM6,%ZMM2            | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nVPSRLQ $0x20,%ZMM6,%ZMM6              | 4     | 4    | 0    | 0    | 0    | 0    | 0    | 0  | 11      | 8\nVPMULUDQ %ZMM9,%ZMM6,%ZMM6            | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nVPSLLQ $0x20,%ZMM6,%ZMM6              | 4     | 4    | 0    | 0    | 0    | 0    | 0    | 0  | 11      | 8\nVPADDQ (%RSP),%ZMM2,%ZMM2             | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 2       | 0.50\nVPADDQ %ZMM2,%ZMM6,%ZMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVFMADD213PS %YMM1,%YMM5,%YMM10        | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nKXNORW %K0,%K0,%K1                    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nKXNORW %K0,%K0,%K2                    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVPADDQ 0x133a(%RIP){1to8},%ZMM2,%ZMM1 | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 2       | 0.50\nVSCATTERQPS %YMM10,(,%ZMM2,1){%K2}    | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 20      | 10\nVFMADD213PS %YMM3,%YMM5,%YMM8         | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nKXNORW %K0,%K0,%K2                    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVSCATTERQPS %YMM8,(,%ZMM1,1){%K2}     | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 20      | 10\nVPADDQ 0x1321(%RIP){1to8},%ZMM2,%ZMM1 | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 2       | 0.50\nVFMADD213PS %YMM4,%YMM5,%YMM0         | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nVSCATTERQPS %YMM0,(,%ZMM1,1){%K1}     | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 20      | 10\nCMP %RSI,%R9                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVMOVAPS -0x70(%RSP),%XMM0             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nJMP 401898 <move_particles+0x5e8>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 2\nVMOVDQA64 0x1293(%RIP),%ZMM6          | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nXOR %EAX,%EAX\nTEST %R8,%R8                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401c55 <move_particles+0x9a5>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nJMP 401dcf <move_particles+0xb1f>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 2\nNOPW (%RAX,%RAX,1)                    | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "0% of peak computational performance is used (0.59 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 81.00 to 53.00 cycles (1.53x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
          details = "64% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 62% of SSE/AVX loads are used in vector version.\n - 66% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 66% of SSE/AVX multiply instructions are used in vector version.\n - 52% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is partially vectorized.\nOnly 45% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 81.00 to 53.33 cycles (1.52x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          title = "FMA",
          txt = "Detected 24 FMA (fused multiply-add) operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          workaround = "Use vector aligned instructions:\n 1) align your arrays on 64 bytes boundaries\n 2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n",
          details = " - VMOVUPS: 2 occurrences\n",
          title = "Vector unaligned load/store instructions",
          txt = "Detected 2 optimal vector unaligned load/store instructions.\n",
        },
        {
          workaround = "Try to simplify your code and/or replace indirect accesses with unit-stride ones.",
          details = " - VSCATTERQPS: 3 occurrences\n",
          title = "Gather/scatter instructions",
          txt = "Detected gather/scatter instructions (typically caused by indirect accesses).",
        },
        {
          title = "Type of elements and instruction set",
          txt = "3 AVX instructions are processing arithmetic or math operations on single precision FP elements in vector mode (eight at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 48 FP arithmetical operations:\n - 24: addition or subtraction (all inside FMA instructions)\n - 24: multiply (all inside FMA instructions)\nThe binary function is loading 1084 bytes (271 single precision FP elements).\nThe binary function is storing 464 bytes (116 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.03 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 161\nloop length        : 951\nused x86 registers : 9\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 11\nused zmm registers : 24\nnb stack references: 6\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 60.00 cycles\ninstruction queue    : 80.50 cycles\ndecoding             : 80.50 cycles\nmicro-operation queue: 81.00 cycles\nfront end            : 81.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 36.50 | 36.50 | 27.00 | 27.00 | 32.50 | 32.50 | 9.00\ncycles | 36.50 | 36.50 | 27.00 | 27.00 | 32.50 | 32.50 | 9.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 81.00\nDispatch  : 36.50\nOverall L1: 81.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 41%\nload   : 54%\nstore  : 100%\nmul    : 66%\nadd-sub: 66%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 85%\nload    : 69%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 82%\nINT+FP\nall     : 64%\nload    : 62%\nstore   : 100%\nmul     : 66%\nadd-sub : 66%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 52%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 42%\nload   : 46%\nstore  : 100%\nmul    : 70%\nadd-sub: 70%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 27%\nFP\nall     : 48%\nload    : 36%\nstore   : 45%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 50%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 48%\nINT+FP\nall     : 45%\nload    : 41%\nstore   : 63%\nmul     : 70%\nadd-sub : 70%\nfma     : 50%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 37%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 81.00 cycles. At this rate:\n - 10% of peak load performance is reached (13.38 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 8% of peak store performance is reached (5.73 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 4012b0\n\nInstruction                           | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6 | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------\nSUB $0xf8,%RSP                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nTEST %RSI,%RSI                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401898 <move_particles+0x5e8>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nMOV %RSI,%R9                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nAND $-0x20,%R9                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nLEA 0x8(%RDI),%R8                     | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nXOR %R10D,%R10D\nVMOVSS 0x1d32(%RIP),%XMM13            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVSS 0x1d2e(%RIP),%XMM14            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPBROADCASTQ 0x1dd8(%RIP),%ZMM9       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ %RDI,%ZMM2               | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 3       | 1\nVPBROADCASTQ 0x1dd0(%RIP),%ZMM15      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dce(%RIP),%ZMM6       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dcc(%RIP),%ZMM10      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dca(%RIP),%ZMM7       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1dc8(%RIP),%ZMM11      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVBROADCASTSS 0x1cde(%RIP),%ZMM12      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVAPS %XMM0,-0x70(%RSP)             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVMOVDQU64 %ZMM2,(%RSP)                | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVMOVDQU64 %ZMM6,0x80(%RSP)            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVMOVDQU64 %ZMM7,0x40(%RSP)            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nJMP 40139b <move_particles+0xeb>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 2\nNOPL (%RAX)                           | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nTEST %RSI,%RSI                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401898 <move_particles+0x5e8>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nCMP $0x7,%RSI                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 4018a0 <move_particles+0x5f0>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nXOR %R9D,%R9D\nSUB %R9,%RSI                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nLEA (%R9,%R9,2),%RAX                  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nLEA (%RDI,%RAX,8),%RAX                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nXCHG %AX,%AX                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nADD $0xf8,%RSP                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nRET\nLEA -0x1(%RSI),%RAX                   | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMOV $0x18,%ECX                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMUL %RCX                              | 3     | 0    | 0    | 0    | 0    | 3    | 0    | 0  | 8       | 7\nSETO %CL                              | 1     | 0    | 0    | 0    | 0    | 1    | 1    | 0  | 2       | 1\nMOV %RDI,%RDX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nNOT %RDX                              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nXOR %R9D,%R9D\nCMP %RDX,%RAX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 401853 <move_particles+0x5a3>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nTEST %CL,%CL                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nLEA 0x4(%RDI),%RDX                    | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nNOT %RDX                              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nCMP %RDX,%RAX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 401853 <move_particles+0x5a3>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nTEST %CL,%CL                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nNOT %R8                               | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nCMP %R8,%RAX                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJA 401853 <move_particles+0x5a3>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nTEST %CL,%CL                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nMOV %RSI,%R9                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nAND $-0x8,%R9                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVBROADCASTSS %XMM0,%YMM5              | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 3-6     | 1\nLEA -0x8(%R9),%RAX                    | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMOV %RAX,%RCX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nSHR $0x3,%RCX                         | 1     | 0    | 0    | 0    | 0    | 1    | 0    | 0  | 1       | 1\nADD $0x1,%RCX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nMOV %ECX,%R8D                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nAND $0x1,%R8D                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nTEST %RAX,%RAX                        | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401de3 <move_particles+0xb33>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nSUB %R8,%RCX                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVMOVDQA64 %ZMM6,%ZMM26                | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVDQA64 0x1759(%RIP),%ZMM6          | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nXOR %EAX,%EAX\nVBROADCASTSD 0x17c6(%RIP),%YMM0       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS %YMM0,-0x40(%RSP)             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVBROADCASTI64X4 0x181e(%RIP),%ZMM21   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTSD 0x17b5(%RIP),%YMM0       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS %YMM0,-0x60(%RSP)             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 2       | 1\nVBROADCASTI64X4 0x1825(%RIP),%ZMM22   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x183b(%RIP),%ZMM23   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x1851(%RIP),%ZMM24   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x1867(%RIP),%ZMM28   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTF128 0x189e(%RIP),%YMM14    | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTF128 0x18a5(%RIP),%YMM15    | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBROADCASTI64X4 0x186b(%RIP),%ZMM16   | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPBROADCASTQ 0x1769(%RIP),%ZMM17      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1767(%RIP),%ZMM18      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1765(%RIP),%ZMM19      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nVPBROADCASTQ 0x1763(%RIP),%ZMM20      | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 3       | 0.50\nMOV %RDI,%RDX                         | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nVMOVDQU64 (%RSP),%ZMM25               | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVDQA64 %ZMM7,%ZMM27                | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVUPS -0x60(%RSP),%YMM3             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nNOPW %CS:(%RAX,%RAX,1)                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nNOPL (%RAX)                           | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\nTEST %R8,%R8                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJE 401dcf <move_particles+0xb1f>      | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nLEA (%RAX,%RAX,2),%RAX                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVMOVUPS (%RDI,%RAX,8),%ZMM0           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS 0x40(%RDI,%RAX,8),%ZMM2       | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS 0x80(%RDI,%RAX,8),%YMM7       | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVMOVUPS 0xa0(%RDI,%RAX,8),%YMM8       | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVBLENDPS $0x30,%YMM7,%YMM8,%YMM3      | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTSD 0x146f(%RIP),%YMM1       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM3,%YMM1,%YMM1             | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14ca(%RIP),%YMM4            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM4           | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x40,%YMM1,%YMM4,%YMM1     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTSD 0x1455(%RIP),%YMM4       | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM3,%YMM4,%YMM3             | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14c8(%RIP),%YMM4            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM4           | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x40,%YMM3,%YMM4,%YMM3     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVAPS 0x14d4(%RIP),%YMM4            | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM4           | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x20,%YMM7,%YMM8,%YMM10      | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x20,%YMM10,%YMM7,%YMM10     | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVPERMPD $-0x3c,%YMM10,%YMM10          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 2       | 1\nVBLENDPS $-0x20,%YMM10,%YMM4,%YMM4    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVMOVAPS 0x14cf(%RIP),%YMM10           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM2,%ZMM0,%ZMM10          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x31,%YMM7,%YMM8,%YMM11      | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVSHUFPS $0x24,%YMM11,%YMM7,%YMM11     | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVPERMPD $-0x3c,%YMM11,%YMM11          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 2       | 1\nVBLENDPS $-0x20,%YMM11,%YMM10,%YMM10  | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBLENDPS $0xc,%YMM7,%YMM8,%YMM7       | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTF128 0x1503(%RIP),%YMM8     | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM7,%YMM8,%YMM8             | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14b6(%RIP),%YMM11           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM0,%ZMM2,%ZMM11          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x20,%YMM8,%YMM11,%YMM8    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVBROADCASTF128 0x14f1(%RIP),%YMM11    | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMPS %YMM7,%YMM11,%YMM7            | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4       | 2\nVMOVAPS 0x14b4(%RIP),%YMM11           | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nVPERMI2PS %ZMM0,%ZMM2,%ZMM11          | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0  | 4-7     | 2\nVBLENDPS $-0x20,%YMM7,%YMM11,%YMM0    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVPMULUDQ %ZMM9,%ZMM6,%ZMM2            | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nVPSRLQ $0x20,%ZMM6,%ZMM6              | 4     | 4    | 0    | 0    | 0    | 0    | 0    | 0  | 11      | 8\nVPMULUDQ %ZMM9,%ZMM6,%ZMM6            | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nVPSLLQ $0x20,%ZMM6,%ZMM6              | 4     | 4    | 0    | 0    | 0    | 0    | 0    | 0  | 11      | 8\nVPADDQ (%RSP),%ZMM2,%ZMM2             | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 2       | 0.50\nVPADDQ %ZMM2,%ZMM6,%ZMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVFMADD213PS %YMM1,%YMM5,%YMM10        | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nKXNORW %K0,%K0,%K1                    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nKXNORW %K0,%K0,%K2                    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVPADDQ 0x133a(%RIP){1to8},%ZMM2,%ZMM1 | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 2       | 0.50\nVSCATTERQPS %YMM10,(,%ZMM2,1){%K2}    | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 20      | 10\nVFMADD213PS %YMM3,%YMM5,%YMM8         | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nKXNORW %K0,%K0,%K2                    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 2       | 0.50\nVSCATTERQPS %YMM8,(,%ZMM1,1){%K2}     | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 20      | 10\nVPADDQ 0x1321(%RIP){1to8},%ZMM2,%ZMM1 | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0  | 2       | 0.50\nVFMADD213PS %YMM4,%YMM5,%YMM0         | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0  | 6       | 0.50\nVSCATTERQPS %YMM0,(,%ZMM1,1){%K1}     | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1  | 20      | 10\nCMP %RSI,%R9                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nVMOVAPS -0x70(%RSP),%XMM0             | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nJNE 401853 <move_particles+0x5a3>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nJMP 401898 <move_particles+0x5e8>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 2\nVMOVDQA64 0x1293(%RIP),%ZMM6          | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0  | 5       | 0.50\nXOR %EAX,%EAX\nTEST %R8,%R8                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 1       | 0.50\nJNE 401c55 <move_particles+0x9a5>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 1-2\nJMP 401dcf <move_particles+0xb1f>     | 1     | 0    | 0    | 0    | 0    | 0    | 1    | 0  | 0       | 2\nNOPW (%RAX,%RAX,1)                    | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "0% of peak computational performance is used (0.59 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 81.00 to 53.00 cycles (1.53x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
          details = "64% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 62% of SSE/AVX loads are used in vector version.\n - 66% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 66% of SSE/AVX multiply instructions are used in vector version.\n - 52% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is partially vectorized.\nOnly 45% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 81.00 to 53.33 cycles (1.52x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          title = "FMA",
          txt = "Detected 24 FMA (fused multiply-add) operations.",
        },
      },
    },
  common = {
    header = {
      "",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
}
